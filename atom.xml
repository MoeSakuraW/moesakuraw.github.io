<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>萌樱の小窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://moesakura.world/"/>
  <updated>2020-02-08T12:39:30.902Z</updated>
  <id>https://moesakura.world/</id>
  
  <author>
    <name>MoeSakura</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Citra - 逆转裁判</title>
    <link href="https://moesakura.world/archives/citra-ace-attorney/"/>
    <id>https://moesakura.world/archives/citra-ace-attorney/</id>
    <published>2020-02-08T09:44:26.000Z</published>
    <updated>2020-02-08T12:39:30.902Z</updated>
    
    <content type="html"><![CDATA[<p>先祝小伙伴们元宵节快乐。本来过年前就打算分享的游戏，直到今天萌樱才想起来…</p><p>相信逆转裁判这款游戏，小伙伴们没玩过都听说过。这是一款很老的 AVG ，第一部作品是 2001 年 登录 GBA 掌机，后来很多平台都能玩到这款游戏。但是每一部作品都能玩的，也只有 3DS 了。没有 3DS 的小伙伴们用 Citra 愉快的玩耍。</p><p>Citra 是一款多平台的 3DS 模拟器，支持 Windows，Linux 以及 macOS ，大部分游戏模拟起来都很流畅。缺点就是 3DS 只有 240 x 400 的分辨率，虽然可以在设置中多开几倍分辨率开启高清模式，但是如果是 3D 的游戏开 2 倍及以上就会卡得生活不能自理。</p><p>官网：<a href="https://citra-emu.org/" target="_blank" rel="noopener external nofollow noreferrer">https://citra-emu.org/</a></p><p>Github：<a href="https://github.com/citra-emu/citra" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/citra-emu/citra</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>模拟器：<a href="https://github.com/citra-emu/citra-canary/releases" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/citra-emu/citra-canary/releases</a></p><p>游戏本体：<a href="https://cloud.moesakura.world/游戏/Citra/" target="_blank" rel="noopener external nofollow noreferrer">https://cloud.moesakura.world/游戏/Citra/</a></p><h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><p>仅适用于 Windows 平台</p><ul><li>下载最新的 <code>citra-windows-mingw.7z</code> ，<code>user.7z</code> 以及 <code>游戏</code> 并解压</li><li>把 <code>user</code> 文件夹复制到模拟器文件夹里</li><li>打开 模拟器文件夹中的 <code>citra-qt.exe</code></li><li>点击 <code>文件 - 安装 CIA</code> 找到游戏进行安装</li></ul><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;先祝小伙伴们元宵节快乐。本来过年前就打算分享的游戏，直到今天萌樱才想起来…&lt;/p&gt;
&lt;p&gt;相信逆转裁判这款游戏，小伙伴们没玩过都听说过。这是一款很老的 AVG ，第一部作品是 2001 年 登录 GBA 掌机，后来很多平台都能玩到这款游戏。但是每一部作品都能玩的，也只有
        
      
    
    </summary>
    
    
    
      <category term="3DS" scheme="https://moesakura.world/tags/3DS/"/>
    
      <category term="Citra" scheme="https://moesakura.world/tags/Citra/"/>
    
      <category term="游戏" scheme="https://moesakura.world/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>搭建和萌樱同款的 Hexo</title>
    <link href="https://moesakura.world/archives/hexo/"/>
    <id>https://moesakura.world/archives/hexo/</id>
    <published>2020-01-06T06:55:59.000Z</published>
    <updated>2020-01-06T10:19:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一说一，Hexo 真香。顺便安利一下<a href="https://skk.moe/" target="_blank" rel="noopener external nofollow noreferrer">苏卡卡</a>大佬写的主题 <a href="https://github.com/SukkaW/hexo-theme-suka" target="_blank" rel="noopener external nofollow noreferrer">Suka</a> 。</p><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>设置代理可以加快下载速度，没有或者不知道是什么的小伙伴可以跳到<a href="/archives/hexo/#设置-Git-GitHub">设置 Git / GitHub</a></p><blockquote>萌樱的 http 代理端口是 <code>7890</code> ，小伙伴们跟居自己的实际情况修改</blockquote><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy=http://127.0.0.1:7890</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><blockquote>不建议用 socks5 协议，因为每次部署到 GitHub 的时候都要输入密码跟用户名</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">git config --global https.proxy <span class="string">"http://127.0.0.1:7890"</span></span><br></pre></td></tr></table></figure><h2 id="设置-Git-GitHub"><a href="#设置-Git-GitHub" class="headerlink" title="设置 Git / GitHub"></a>设置 Git / GitHub</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"GitHub 用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"GitHub 邮箱"</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"GitHub 邮箱"</span></span><br></pre></td></tr></table></figure><ul><li><p>打开 <code>%USERPROFILE%/.ssh</code> ，用文本编辑器打开 <code>id_rsa.pub</code> 复制所有文本</p></li><li><p>打开 <a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener external nofollow noreferrer">GitHub - Setting - SSH and GPG keys - New SSH key</a> </p></li><li><p><code>Title</code> 随意填，<code>Key</code> 填刚刚复制的文本，然后按 <code>Add SSH Key</code></p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/SukkaW/hexo-theme-suka.git suka</span><br><span class="line"><span class="built_in">cd</span> suka</span><br><span class="line">npm install --production</span><br></pre></td></tr></table></figure><ul><li><p>打开主题文件夹，复制 <code>_config.example.yml</code> 重命名为 <code>_config.yml</code></p></li><li><p>打开主题文件夹中的 <code>site_config.yml</code> ，复制所有文本粘贴添加到 Hexo 文件夹的 <code>_config.yml</code> 里</p></li><li><p>修改 <code>site_config.yml</code> 启用 Suka 主题</p></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"><span class="deletion">- theme: landscape</span></span><br><span class="line"><span class="addition">+ theme: suka</span></span><br></pre></td></tr></table></figure><blockquote><p>主题具体配置可以看 <a href="https://theme-suka.skk.moe/docs/" target="_blank" rel="noopener external nofollow noreferrer">Suka 主题文档</a></p></blockquote><h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><p><strong>Gulp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-uglify-es gulp-imagemin del gulp-minify-inline-json --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>Gulp 的食用方法可以看「<a href="/archives/hexo-gulp/">用 Gulp 优化 Hexo</a>」</p></blockquote><p><strong>hexo-filter-nofollow</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save-dev</span><br></pre></td></tr></table></figure><p>打开 <code>_config.yml</code> 添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'www.google.com'</span></span><br></pre></td></tr></table></figure><blockquote>必须排除 <code>www.google.com</code> ，不然主题的本地搜索不能用</blockquote><p><strong>hexo-generator-feed</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save-dev</span><br></pre></td></tr></table></figure><p>打开 <code>_config.yml</code> 添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> </span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure><p><strong>hexo-generator-seo-friendly-sitemap</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save-dev</span><br></pre></td></tr></table></figure><p>打开 <code>_config.yml</code> 添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><h2 id="Hexo-食用方法"><a href="#Hexo-食用方法" class="headerlink" title="Hexo 食用方法"></a>Hexo 食用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">hexo new post <span class="string">"文章标题"</span>  </span><br><span class="line"><span class="comment"># 新建页面</span></span><br><span class="line">hexo new page <span class="string">"页面标题"</span>  </span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">hexo clean  </span><br><span class="line"><span class="comment"># 生成页面</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><ul><li><p>打开 GitHub 新建一个仓库</p></li><li><p>仓库名称必须为 <code>Github 用户名.github.io</code> ，其他默认</p></li><li><p>打开 <code>_config.yml</code> 修改 <code>deploy</code></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/Github</span> <span class="string">用户名/Github</span> <span class="string">用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>生成页面后，运行以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;有一说一，Hexo 真香。顺便安利一下&lt;a href=&quot;https://skk.moe/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;&gt;苏卡卡&lt;/a&gt;大佬写的主题 &lt;a
        
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://moesakura.world/tags/Hexo/"/>
    
      <category term="Gulp" scheme="https://moesakura.world/tags/Gulp/"/>
    
      <category term="Suka" scheme="https://moesakura.world/tags/Suka/"/>
    
  </entry>
  
  <entry>
    <title>用 Gulp 优化 Hexo</title>
    <link href="https://moesakura.world/archives/hexo-gulp/"/>
    <id>https://moesakura.world/archives/hexo-gulp/</id>
    <published>2020-01-04T04:50:30.000Z</published>
    <updated>2020-01-06T11:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>萌樱这两天把博客从 Typecho 搬到 Hexo ，主题也从 <a href="https://www.ihewro.com/archives/489/" target="_blank" rel="noopener external nofollow noreferrer">handsome</a> 换成 <a href="https://github.com/SukkaW/hexo-theme-suka" target="_blank" rel="noopener external nofollow noreferrer">Suka</a> 了，部署在 GitHub 。Hexo 的纯静态页面加载真的很快，真香警告。</p><p>虽然 Hexo 速度已经很快了，但我们还可以用 Gulp 继续优化 Hexo 。萌樱这里分享一个 Google 大法找到食用起来很方便的 gulpfile.js 。</p><h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-uglify-es gulp-imagemin del gulp-minify-inline-json --save-dev</span><br></pre></td></tr></table></figure><p>在 Hexo 文件夹下新建一个 <code>gulpfile.js</code> 文件，粘贴以下代码然后保存</p><blockquote>萌樱稍微修改了一下，小伙伴们可以根据自己的实际情况修改</blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify-es'</span>).default;</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">'hexo'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyInlineJSON = <span class="built_in">require</span>(<span class="string">'gulp-minify-inline-json'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">'public/**/*'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;);</span><br><span class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</span><br><span class="line">            watch: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.exit();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cb()</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        hexo.exit(err);</span><br><span class="line">        <span class="keyword">return</span> cb(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'deploy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'deploy'</span>, &#123;</span><br><span class="line">            watch: <span class="literal">false</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.exit();</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: <span class="string">'ie8'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-img'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/img/**/*'</span>)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle(&#123;</span><br><span class="line">                interlaced: <span class="literal">true</span></span><br><span class="line">            &#125;),</span><br><span class="line">            imagemin.jpegtran(&#123;</span><br><span class="line">                progressive: <span class="literal">true</span></span><br><span class="line">            &#125;),</span><br><span class="line">            imagemin.optipng(&#123;</span><br><span class="line">                optimizationLevel: <span class="number">5</span></span><br><span class="line">            &#125;),</span><br><span class="line">            imagemin.svgo(&#123;</span><br><span class="line">                plugins: [&#123;</span><br><span class="line">                    removeViewBox: <span class="literal">true</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    cleanupIDs: <span class="literal">false</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/img'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'minifyInlineJSON'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(minifyInlineJSON())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'compress'</span>, gulp.series(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-img'</span>, <span class="string">'minify-js'</span>, <span class="string">'minifyInlineJSON'</span>));</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(<span class="string">'clean'</span>, <span class="string">'generate'</span>, <span class="string">'compress'</span>, <span class="string">'deploy'</span>));</span><br></pre></td></tr></table></figure><p>用 Hexo 生成页面后，运行 Gulp 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g  <span class="comment"># 生成页面</span></span><br><span class="line">gulp  <span class="comment"># 包含 hexo d</span></span><br></pre></td></tr></table></figure><p>😋 Enjoy it !</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://maologue.com/Optimize-Hexo-with-Gulp/" target="_blank" rel="noopener external nofollow noreferrer">Optimize Hexo With Gulp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;萌樱这两天把博客从 Typecho 搬到 Hexo ，主题也从 &lt;a href=&quot;https://www.ihewro.com/archives/489/&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow
        
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://moesakura.world/tags/Hexo/"/>
    
      <category term="Gulp" scheme="https://moesakura.world/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>ss-panel-v3-mod_Uim + V2Ray Docker 对接</title>
    <link href="https://moesakura.world/archives/sspanel-v2ray-docker/"/>
    <id>https://moesakura.world/archives/sspanel-v2ray-docker/</id>
    <published>2020-01-03T04:52:08.000Z</published>
    <updated>2020-02-16T16:33:07.247Z</updated>
    
    <content type="html"><![CDATA[<p>萌樱一直以来用的都是 aes-256-gcm + plain 的 SS ，但是这两天开始不太好使了，经常出现断流现象。有一说一，换了 V2Ray 之后虽然偶尔还出现断流，但是总体来说还是挺稳定的，真香。</p><blockquote><p>前端面板必须是 v2rayv3 版的，Anankke 版的能对接上但是不能正常使用</p></blockquote><p>前端 v2rayv3 版：<a href="https://github.com/v2rayv3/ss-panel-v3-mod_Uim" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/v2rayv3/ss-panel-v3-mod_Uim</a><br><del>后端免费版：<a href="https://github.com/hulisang/v2ray-sspanel-v3-mod_Uim-plugin" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/hulisang/v2ray-sspanel-v3-mod_Uim-plugin</a></del><br>后端免费版：<a href="https://github.com/haig233/v2ray-sspanel-v3-mod_Uim-plugin" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/haig233/v2ray-sspanel-v3-mod_Uim-plugin</a></p><p>因为有小伙伴问起后端<a href="https://github.com/haig233/v2ray-sspanel-v3-mod_Uim-plugin" target="_blank" rel="noopener external nofollow noreferrer">免费版</a>跟<a href="https://github.com/v2rayv3/pay-v2ray-sspanel-v3-mod_Uim-plugin/tree/master" target="_blank" rel="noopener external nofollow noreferrer">收费版</a>的区别，萌樱这里说一下好了。免费版在很早的时候已经被原作者删了，<del>现在能用的免费版是 hulisang 在删掉前备份下来的。免费版是hulisang 仅提供 Caddy Docker 镜像维护。</del>收费版则是原作者提供维护，包括添加新功能跟稳定性修复。小伙伴可以选择支持作者，使用收费版获得更新的功能跟更好的稳定性。但是一般来说个人使用的话，免费版已经足够了。</p><p>有小伙伴在评论区反馈，hulisang 已经删库不能用了。现在能用的免费版是评论区的小伙伴 haig233 在 hulisang 删掉前备份下来的。希望小伙伴们也能顺便备份一下 Docker 镜像。萌樱就是这么伸手（小声 。</p><p>DockerHub：<a href="https://hub.docker.com/r/hulisang/v2ray_v3" target="_blank" rel="noopener external nofollow noreferrer">https://hub.docker.com/r/hulisang/v2ray_v3</a></p><p>前端面板搭建起来不难，有兴趣的小伙伴可以去看看 <a href="https://wiki.sspanel.host" target="_blank" rel="noopener external nofollow noreferrer" title="SSPanel UIM 使用文档">SSPanel UIM 使用文档</a> 。</p><blockquote>git clone 的时候，项目地址一定要改成 https://github.com/v2rayv3/ss-panel-v3-mod_Uim.git</blockquote><p>萌樱分享一下自用 V2Ray 配置的 Docker 对接方法，需要其他配置可以自行查阅免费版 <a href="https://github.com/haig233/v2ray-sspanel-v3-mod_Uim-plugin#v2ray-sspanel-v3-mod_Uim-plugin" target="_blank" rel="noopener external nofollow noreferrer">README.md</a> ，基本上都是差不多的。</p><h2 id="前端面板设置"><a href="#前端面板设置" class="headerlink" title="前端面板设置"></a>前端面板设置</h2><p>WS + TLS （Caddy 提供）</p><pre><code>域名;0;16;tls;ws;path=/v2ray|host=域名|inside_port=10550|outside_port=443</code></pre><p>单端口多用户启用：只启用单端口多用户</p><p>节点类型：V2Ray</p><p>添加完后点击单独一个节点是下面这样的</p><p><img src="https://cdn.jsdelivr.net/gh/MoeSakuraW/moesakuraw.github.io/img/V2Ray-Docker.jpg" alt="V2Ray-Docker.jpg"></p><h2 id="后端-Docker-对接"><a href="#后端-Docker-对接" class="headerlink" title="后端 Docker 对接"></a>后端 Docker 对接</h2><p>免费版后端貌似只能用 webapi 对接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir v2ray-agent  &amp;&amp;  \</span><br><span class="line"><span class="built_in">cd</span> v2ray-agent &amp;&amp; \</span><br><span class="line">curl https://raw.githubusercontent.com/haig233/v2ray-sspanel-v3-mod_Uim-plugin/master/install.sh -o install.sh &amp;&amp; \</span><br><span class="line">chmod +x install.sh &amp;&amp; \</span><br><span class="line">bash install.sh</span><br></pre></td></tr></table></figure><p>根据提示选择/输入</p><ul><li>1) install</li><li>1) Docker_Caddy</li><li>ssrpanel_url：$_ENV[‘baseUrl’]</li><li>ssrpanel key：$_ENV[‘muKey’]</li><li>use ssrpanel speedtest：默认</li><li>ssrpanel node_id：节点 ID</li><li>Setting V2ray backend API Listen port：默认</li><li>Setting if the node go downwith panel：默认</li><li>caddy v2ray domain：前端面板设置的域名</li><li>caddy v2ray path：默认</li><li>caddy v2ray tls email：你的邮箱</li><li>caddy v2ray local listen port：默认</li><li>caddy listen port：默认</li></ul><p>运行对接脚本基本可以满足大部分操作需要了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/root/v2ray-agent/install.sh</span><br><span class="line"><span class="comment"># 选择 2 更新配置文件</span></span><br><span class="line"><span class="comment"># 选择 3 更新镜像文件</span></span><br><span class="line"><span class="comment"># 选择 4 查看 Docker log</span></span><br></pre></td></tr></table></figure><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看所有正在运行的 Docker </span></span><br><span class="line">docker container ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看选定 Docker 的 log</span></span><br><span class="line">docker logs -f dockername</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定 Docker</span></span><br><span class="line">docker rm -f dockername</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器使用的磁盘空间</span></span><br><span class="line">docker system df</span><br><span class="line"></span><br><span class="line"><span class="comment">#对 Docker 进行全面垃圾回收</span></span><br><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q：为什么云朵亮了却不能正常使用？<br>A：注意前端面板是不是 v2rayv3 版，不能使用 Anankke 版。</p><p>Q：为什么之前节点都能正常使用，过一段时间之后突然全部无法使用？<br>A：查看是不是前端面板炸了。</p><p>其他问题可以查看 Docker log 进行排错。</p><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;萌樱一直以来用的都是 aes-256-gcm + plain 的 SS ，但是这两天开始不太好使了，经常出现断流现象。有一说一，换了 V2Ray 之后虽然偶尔还出现断流，但是总体来说还是挺稳定的，真香。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前端面板必须是
        
      
    
    </summary>
    
    
    
      <category term="Docker" scheme="https://moesakura.world/tags/Docker/"/>
    
      <category term="V2Ray" scheme="https://moesakura.world/tags/V2Ray/"/>
    
  </entry>
  
  <entry>
    <title>HP 暗影精灵 2 EFI（macOS Catalina 10.15.2）</title>
    <link href="https://moesakura.world/archives/efi-hp-catalina/"/>
    <id>https://moesakura.world/archives/efi-hp-catalina/</id>
    <published>2020-01-02T15:00:52.000Z</published>
    <updated>2020-01-06T08:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>萌樱这里分享一个在 GitHub 上找到的 HP 暗影精灵 2  macOS Catalina 10.15 的 EFI 。暂时没遇到影响日常使用的 Bug ，WiFi 不换网卡无解。</p><p>Github：<a href="https://github.com/tobbylau/HP-OMEN-15-AX017TX-Hacintosh" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/tobbylau/HP-OMEN-15-AX017TX-Hacintosh</a></p><p>下面是萌樱更新了目前最新的 CLOVER 以及驱动的 EFI</p><p>GitHub：<a href="https://github.com/MoeSakuraW/HP-OMEN-15-AX017TX-Hacintosh" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/MoeSakuraW/HP-OMEN-15-AX017TX-Hacintosh</a></p><p><img src="https://cdn.jsdelivr.net/gh/MoeSakuraW/moesakuraw.github.io/img/macOS_Catalina.jpg" alt="macOS_Catalina.jpg"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>EFI：<a href="https://cloud.moesakura.world/%E5%8D%9A%E5%AE%A2/%5BEFI%5D%20HP%20%E6%9A%97%E5%BD%B1%E7%B2%BE%E7%81%B5%202%EF%BC%88macOS%20Catalina%2010.15%EF%BC%89" target="_blank" rel="noopener external nofollow noreferrer">macOS Catalina 10.15  With Clover 5100.zip</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>不知道怎么安装 macOS 的小伙伴可以看「<a href="/archives/hp-install-macos/">HP 暗影精灵 2 安装黑苹果（macOS Mojave 10.14.5）</a>」，里面已经写得很详细，这里就不再赘述了。</p><p>系统写入进 U 盘后，最好先把 U 盘 中 EFI 分区里的文件夹全部删除，再粘贴下载好的 EFI 到 U 盘，这样就不会有多余的文件了。</p><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;萌樱这里分享一个在 GitHub 上找到的 HP 暗影精灵 2  macOS Catalina 10.15 的 EFI 。暂时没遇到影响日常使用的 Bug ，WiFi 不换网卡无解。&lt;/p&gt;
&lt;p&gt;Github：&lt;a
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://moesakura.world/tags/macOS/"/>
    
      <category term="黑苹果" scheme="https://moesakura.world/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>Qinvideo - 基于 Node.js + MongoDB 的前后端分离的动漫 CMS</title>
    <link href="https://moesakura.world/archives/qinvideo/"/>
    <id>https://moesakura.world/archives/qinvideo/</id>
    <published>2020-01-02T12:00:05.000Z</published>
    <updated>2020-01-06T08:41:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>萌樱这里分享一个基于 Node.js + MongoDB 的前后端分离的动漫 CMS 。到目前为止，V1.0 版已经停更，V2.0 版还在写。这套 CMS 有免费跟付费两个版本，付费版有 Andorid 客户端，而且能够快速添加番剧，其他的功能与免费版基本一样。</p><p>官网：<a href="https://qinvideo.org/" target="_blank" rel="noopener external nofollow noreferrer">https://qinvideo.org/</a></p><p>GitHub：<a href="https://github.com/Qinmei/qinvideo" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Qinmei/qinvideo</a></p><p>使用文档：<a href="https://qinvideo.org/docs/" target="_blank" rel="noopener external nofollow noreferrer">https://qinvideo.org/docs/</a></p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>安装 Node.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>用 OneinStack 安装 Nginx + MongoDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://mirrors.linuxeye.com/oneinstack-full.tar.gz &amp;&amp; tar xzf oneinstack-full.tar.gz &amp;&amp; ./oneinstack/install.sh --nginx_option 1 --db_option 15 --dbinstallmethod 1 --dbrootpwd oneinstack --reboot</span><br></pre></td></tr></table></figure><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>为了减少不必要的麻烦以及运行错误（大雾），先关闭 OneinStack 安装 MongoDB 时默认开启的用户认证。</p><p>打开 <code>/etc/mongod.conf</code> ，修改 <code>authorization</code> 为 <code>disabled</code> 并保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启 MongoDB</span></span><br><span class="line">service mongod restart</span><br></pre></td></tr></table></figure><blockquote>MongoDB 只有插入一条数据时，数据库才会真正被创建</blockquote><p>创建一个数据库并在数据库里插入一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="comment"># 插入一条数据</span></span><br><span class="line">db.repo.insert(&#123;<span class="string">"name"</span>:<span class="string">"qinvideo"</span>&#125;)</span><br><span class="line"><span class="comment"># 查看数据库</span></span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>用 OneinStack 新建一个站点，创建时添加伪静态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> oneinstack</span><br><span class="line">./vhost.sh</span><br></pre></td></tr></table></figure><p>打开网站目录，下载 Qinvideo 并安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/wwwroot/域名</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/Qinmei/qinvideo.git tmp &amp;&amp; mv tmp/.git . &amp;&amp; rm -rf tmp &amp;&amp; git reset --hard</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>修改网站目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /data/wwwroot/ -<span class="built_in">type</span> d -<span class="built_in">exec</span> chmod 755 &#123;&#125; \;</span><br><span class="line">find /data/wwwroot/ -<span class="built_in">type</span> f -<span class="built_in">exec</span> chmod 644 &#123;&#125; \;</span><br><span class="line">chown -R www:www /data/wwwroot/网站域名</span><br></pre></td></tr></table></figure><p>打开 <code>config.js</code> 修改配置文件</p><ul><li>修改 <code>uri</code> 为 <code>"mongodb://localhost:27017/数据库名"</code> </li><li>修改 <code>salt</code> 以及 <code>tokenSecret</code> 为任意字符串</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 试运行</span></span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>按 <code>Ctrl + C</code>  终止运行</p><blockquote>出现 <code>Mongoose connection connected</code> 表示成功运行<br>如果报错，检查配置文件和数据库是否配置正确</blockquote><h3 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h3><p>打开 <code>/usr/local/nginx/conf/vhost/网站域名.conf</code> 修改网站运行目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root /data/wwwroot/网站域名/public;</span><br></pre></td></tr></table></figure><p>打开 <code>/usr/local/nginx/conf/rewrite/伪静态.conf</code> ，添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 20M;</span><br><span class="line">location /api/ &#123;</span><br><span class="line">        proxy_pass      http://localhost:9000/;</span><br><span class="line">        proxy_redirect  off;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br><span class="line">location /qinmei &#123;</span><br><span class="line">    <span class="built_in">alias</span>      /home/qinvideo-node/public;</span><br><span class="line">    index      /backend/index.html;</span><br><span class="line">    try_files  <span class="variable">$uri</span> <span class="variable">$uri</span>/ /backend/index.html?<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /web &#123;</span><br><span class="line">    <span class="built_in">alias</span>      /home/qinvideo-node/public;</span><br><span class="line">    index      /pc/index.html;</span><br><span class="line">    try_files  <span class="variable">$uri</span> <span class="variable">$uri</span>/ /pc/index.html?<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /m &#123;</span><br><span class="line">    <span class="built_in">alias</span>      /home/qinvideo-node/public;</span><br><span class="line">    index      /h5/index.html;</span><br><span class="line">    try_files  <span class="variable">$uri</span> <span class="variable">$uri</span>/ /h5/index.html?<span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location =/ &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* (mobile|nokia|iphone|ipad|android|samsung|htc|blackberry)) &#123;</span><br><span class="line">         rewrite  ^(.*) <span class="variable">$scheme</span>://<span class="variable">$host</span>/m/ permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> !~* (mobile|nokia|iphone|ipad|android|samsung|htc|blackberry))&#123;</span><br><span class="line">       rewrite  ^(.*) <span class="variable">$scheme</span>://<span class="variable">$host</span>/web/ permanent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>打开网站目录运行 app.js 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/wwwroot/域名</span><br><span class="line">apt install -y screen</span><br><span class="line">screen -S qinvideo</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>成功运行后按 <code>Ctrl + A</code> 再按 <code>D</code> 后台运行。</p><blockquote>网址/qinmei 是后台管理面板的地址<br>网址/web 是 PC 端的前端地址<br>网址/m 是移动端的前端地址</blockquote><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;萌樱这里分享一个基于 Node.js + MongoDB 的前后端分离的动漫 CMS 。到目前为止，V1.0 版已经停更，V2.0 版还在写。这套 CMS 有免费跟付费两个版本，付费版有 Andorid
        
      
    
    </summary>
    
    
    
      <category term="Debian" scheme="https://moesakura.world/tags/Debian/"/>
    
      <category term="OneinStack" scheme="https://moesakura.world/tags/OneinStack/"/>
    
      <category term="MongoDB" scheme="https://moesakura.world/tags/MongoDB/"/>
    
      <category term="Node.js" scheme="https://moesakura.world/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Telegram 私聊机器人</title>
    <link href="https://moesakura.world/archives/tg-forwarder-bot/"/>
    <id>https://moesakura.world/archives/tg-forwarder-bot/</id>
    <published>2020-01-02T09:48:34.000Z</published>
    <updated>2020-01-06T08:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为 +86 的手机号骚扰广告太多，Telegram 官方限制了部分 +86 的用户对其他非 +86 用户私聊。如果有私聊需要，被限制的用户可以用官方的 <a href="https://t.me/SpamBot" target="_blank" rel="noopener external nofollow noreferrer">@Spam Info Bot</a> 解除限制，而被私聊的用户可以用私聊机器人。</p><p>萌樱这里分享的是托尔酱用 Python 3 写的一个消息转发机器人，被转发的消息会带消发送人的用户 id ，搭建起来也简单方便。</p><p>GitHub：<a href="https://github.com/Tooruchan/simple-forwarder-bot" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Tooruchan/simple-forwarder-bot</a></p><p>在 <a href="https://t.me/BotFather" target="_blank" rel="noopener external nofollow noreferrer">@BotFather</a> 处申请一个机器人并获取机器人的 API Token </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install -y python3-pip git screen</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Tooruchan/simple-forwarder-bot</span><br><span class="line"><span class="built_in">cd</span> simple-forwarder-bot</span><br><span class="line">pip3 install python-telegram-bot --upgrade</span><br></pre></td></tr></table></figure><p>用 <a href="https://t.me/userinfobot" target="_blank" rel="noopener external nofollow noreferrer">@userinfobot</a> 获取自己的用户 id </p><p>修改 <code>config.json</code> ，token 填机器人的 API Token ，admin 填自己的用户 id</p><blockquote>    必须用 Python 3 运行，并且不要尝试给自己的机器人发消息，否则会报错</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -S bot  <span class="comment"># 新建一个会话</span></span><br><span class="line">python3 main.py</span><br></pre></td></tr></table></figure><p>按 <code>Ctrl + A</code> 再按 <code>D</code> 后台运行</p><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;因为 +86 的手机号骚扰广告太多，Telegram 官方限制了部分 +86 的用户对其他非 +86 用户私聊。如果有私聊需要，被限制的用户可以用官方的 &lt;a href=&quot;https://t.me/SpamBot&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
    
      <category term="Debian" scheme="https://moesakura.world/tags/Debian/"/>
    
      <category term="Python" scheme="https://moesakura.world/tags/Python/"/>
    
      <category term="Telegram" scheme="https://moesakura.world/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>手动编译 TCP BBR v2 Alpha/Preview 内核</title>
    <link href="https://moesakura.world/archives/bbrv2-alpha/"/>
    <id>https://moesakura.world/archives/bbrv2-alpha/</id>
    <published>2020-01-02T06:52:58.000Z</published>
    <updated>2020-01-06T08:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信小伙伴们对 Google 的 TCP BBR 拥塞控制算法都不陌生。<a href="https://blog.csdn.net/dog250" target="_blank" rel="noopener external nofollow noreferrer">dog250</a> 大佬曾经提出过 <a href="https://blog.csdn.net/dog250/article/details/80629551" target="_blank" rel="noopener external nofollow noreferrer">TCP BBR 存在的一些问题</a>并提供了修正后的代码，于是有了 <a href="https://github.com/cx9208/bbrplus" target="_blank" rel="noopener external nofollow noreferrer">BBRplus</a> 。Google 也并非不知道初代 BBR 存在的问题，如今 BBR v2 Alpha/Preview 已经发布了。</p><p>如果想体验 BBR v2 ，可以直接下已经载编译完成的内核或者用一键脚本进行更换。虽然萌樱不能明确告诉小伙伴们 BBRplus 跟 BBR v2 哪个加速效果更好，但萌樱推荐用 Google 官方的 BBR v2 。 小伙伴们可以自行体验，毕竟同一套算法在不同的网络环境中也会存在很大差异。</p><p>GitHub：<a href="https://github.com/google/bbr/tree/v2alpha" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/google/bbr/tree/v2alpha</a></p><p>TCP BBR v2 alpha 源码：<a href="https://github.com/google/bbr/blob/v2alpha/net/ipv4/tcp_bbr2.c" target="_blank" rel="noopener external nofollow noreferrer">tcp_bbr2.c</a></p><h3 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y build-essential libncurses5-dev git screen</span><br><span class="line">apt -y build-dep linux</span><br></pre></td></tr></table></figure><h3 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -o google-bbr -b v2alpha  https://github.com/google/bbr.git</span><br><span class="line"><span class="built_in">cd</span> bbr</span><br><span class="line">make menuconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用签名调试</span></span><br><span class="line">scripts/config --<span class="built_in">disable</span> MODULE_SIG</span><br><span class="line">scripts/config --<span class="built_in">disable</span> DEBUG_INFO</span><br></pre></td></tr></table></figure><p>进入 <code>Networking support ---> Networking options ---> TCP: advanced congestion control ---> </code> ，选中 <code>BBR2 TCP</code> 按空格标上 <code>M</code> ，其他默认，然后保存退出。</p><p>开始编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -S kernel</span><br><span class="line">make -jN deb-pkg  <span class="comment"># N 为线程数</span></span><br></pre></td></tr></table></figure><p>按 <code>Ctrl + A</code> 再按 <code>D</code> 后台编译</p><p>编译需要很长的时间，编译完成后 <code>/root</code> 下生成以下文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux-headers-5.2.0-rc3+_5.2.0-rc3+-1_amd64.deb</span><br><span class="line">linux-image-5.2.0-rc3+_5.2.0-rc3+-1_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="更换内核"><a href="#更换内核" class="headerlink" title="更换内核"></a>更换内核</h3><blockquote>OpenVZ 虚拟化技术的 VPS 不能更换内核<br>对内核进行操作有风险，请确保数据安全<br>推荐在纯净的系统上进行更换<br></blockquote><p>以 Debian 9 64-bit 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 BBR v2alpha 内核</span></span><br><span class="line">dpkg -i linux-headers-5.2.0-rc3+_5.2.0-rc3+-1_amd64.deb</span><br><span class="line">dpkg -i linux-image-5.2.0-rc3+_5.2.0-rc3+-1_amd64.deb</span><br><span class="line">dpkg -l|grep linux-headers   | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">dpkg -l|grep linux-image   | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原版内核</span></span><br><span class="line">apt purge -y <span class="string">"linux-image-4.9.0-9-amd64"</span></span><br><span class="line">update-grub</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="开启-BBR-v2"><a href="#开启-BBR-v2" class="headerlink" title="开启 BBR v2"></a>开启 BBR v2</h3><p>输入以下命令开启 BBR v2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc = fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control = bbr2"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>输入以下命令开启 ECN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_ecn = 1"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_ecn_fallback = 1"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>查看是否开启 BBR v2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>显示以下即已开启 BBR v2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sysctl net.ipv4.tcp_available_congestion_control</span></span><br><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr2</span><br></pre></td></tr></table></figure><p>查看 BBR v2 是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>显示以下即 BBR v2 已生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lsmod | grep bbr</span></span><br><span class="line">tcp_bbr2               40960  1</span><br></pre></td></tr></table></figure><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;相信小伙伴们对 Google 的 TCP BBR 拥塞控制算法都不陌生。&lt;a href=&quot;https://blog.csdn.net/dog250&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow
        
      
    
    </summary>
    
    
    
      <category term="Debian" scheme="https://moesakura.world/tags/Debian/"/>
    
      <category term="Kernel" scheme="https://moesakura.world/tags/Kernel/"/>
    
      <category term="内核" scheme="https://moesakura.world/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Debian 更换 XanMod Kernel</title>
    <link href="https://moesakura.world/archives/xanmod-kernel/"/>
    <id>https://moesakura.world/archives/xanmod-kernel/</id>
    <published>2020-01-02T06:13:55.000Z</published>
    <updated>2020-01-06T08:42:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>XanMod Kernel 是一个第三方编译的 Linux 内核。稳定性还可以，换上自动开启 BBR ，其他的特性萌樱在使用过程中基本没有什么感觉，主要是最新版内核尝鲜。分享给喜欢第三方编译或者喜欢用最新版内核的小伙伴。</p><p>官网：<a href="https://xanmod.org/" target="_blank" rel="noopener external nofollow noreferrer">https://xanmod.org/</a></p><blockquote>OpenVZ 虚拟化技术的 VPS 不能更换内核<br>对内核进行操作有风险，请确保数据安全<br>推荐在纯净的系统上进行更换<br></blockquote><p>以 Debian 9 64-bit 为例</p><p>更换内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'deb http://deb.xanmod.org releases main'</span> | tee /etc/apt/sources.list.d/xanmod-kernel.list &amp;&amp; wget -qO – https://dl.xanmod.org/gpg.key | apt-key add –</span><br><span class="line">apt update &amp;&amp; apt install -y linux-xanmod</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>删除内核</p><blockquote>    如果要换回原版内核，就不要删除原版内核了，用以下相似的命令删除 <code>XanMod Kernel</code> 即可</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l|grep linux-image   | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">apt-get purge -y <span class="string">"linux-image-4.9.0-9-amd64"</span></span><br><span class="line">update-grub</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;XanMod Kernel 是一个第三方编译的 Linux 内核。稳定性还可以，换上自动开启 BBR ，其他的特性萌樱在使用过程中基本没有什么感觉，主要是最新版内核尝鲜。分享给喜欢第三方编译或者喜欢用最新版内核的小伙伴。&lt;/p&gt;
&lt;p&gt;官网：&lt;a
        
      
    
    </summary>
    
    
    
      <category term="Debian" scheme="https://moesakura.world/tags/Debian/"/>
    
      <category term="Kernel" scheme="https://moesakura.world/tags/Kernel/"/>
    
      <category term="内核" scheme="https://moesakura.world/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Debian 8 apt-get update 失败解决方法</title>
    <link href="https://moesakura.world/archives/failed-to-fetch/"/>
    <id>https://moesakura.world/archives/failed-to-fetch/</id>
    <published>2020-01-02T05:48:52.000Z</published>
    <updated>2020-01-03T06:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>萌樱用 Debian 8 时 apt-get update 失败了，出现了以下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">W: Failed to fetch http://ftp.debian.org/debian/dists/jessie-updates/InRelease Unable to find expected entry <span class="string">'main/source/Sources'</span> <span class="keyword">in</span> Release file (Wrong sources.list entry or malformed file)</span><br><span class="line"></span><br><span class="line">E: Some index files failed to download. They have been ignored‚ or old ones used instead.</span><br></pre></td></tr></table></figure><p>运行以下命令换源即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">"deb http://archive.debian.org/debian/ jessie main\ndeb-src http://archive.debian.org/debian/ jessie main\ndeb http://security.debian.org jessie/updates main\ndeb-src http://security.debian.org jessie/updates main"</span> &gt; /etc/apt/sources.list</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>官方消息：<a href="https://lists.debian.org/debian-devel-announce/2019/03/msg00006.html" target="_blank" rel="noopener external nofollow noreferrer">Removal of Wheezy and Jessie (except LTS) from mirrors</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;萌樱用 Debian 8 时 apt-get update 失败了，出现了以下错误&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
    
    
      <category term="Debian" scheme="https://moesakura.world/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>PyOne - 基于 Python 的 OneDrive 文件本地化浏览系统</title>
    <link href="https://moesakura.world/archives/pyone/"/>
    <id>https://moesakura.world/archives/pyone/</id>
    <published>2020-01-02T03:21:30.000Z</published>
    <updated>2020-01-06T08:41:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>PyOne 是一款基于 Python-Flask 的 OneDrive 文件本地化浏览系统，用 MongoDB 储存文件列表，Redis 缓存数据，支持绑定多个网盘，能极大的提高使用效率。</p><p>GitHub：<a href="https://github.com/abbeyokgo/PyOne" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/abbeyokgo/PyOne</a></p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>用 OneinStack 安装 Nginx &amp; MongoDB &amp; Redis </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://mirrors.linuxeye.com/oneinstack-full.tar.gz &amp;&amp; tar xzf oneinstack-full.tar.gz &amp;&amp; ./oneinstack/install.sh --nginx_option 1 --php_option 8 --phpcache_option 1 --php_extensions redis --db_option 15 --dbinstallmethod 1 --dbrootpwd oneinstack --redis  --reboot</span><br></pre></td></tr></table></figure><p>安装环境依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt -y install python-setuptools</span><br><span class="line">easy_install pip</span><br><span class="line">apt install -y aptitude</span><br><span class="line">aptitude install -y python-crypto</span><br></pre></td></tr></table></figure><h2 id="关闭-MongoDB-用户认证"><a href="#关闭-MongoDB-用户认证" class="headerlink" title="关闭 MongoDB 用户认证"></a>关闭 MongoDB 用户认证</h2><p>打开 <code>/etc/mongod.conf</code> ，修改 <code>authorization</code> 为 <code>disabled</code> 并保存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启 MongoDB</span></span><br><span class="line">service mongod restart</span><br></pre></td></tr></table></figure><h2 id="搭建-PyOne"><a href="#搭建-PyOne" class="headerlink" title="搭建 PyOne"></a>搭建 PyOne</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/abbeyokgo/PyOne.git</span><br><span class="line"><span class="built_in">cd</span> PyOne</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">cp self_config.py.sample self_config.py</span><br><span class="line">cp supervisord.conf.sample supervisord.conf</span><br><span class="line">touch .install</span><br><span class="line"><span class="comment"># 安装 screen</span></span><br><span class="line">apt install -y screen</span><br><span class="line"><span class="comment"># 新建会话</span></span><br><span class="line">screen -S pyone</span><br><span class="line"><span class="comment"># 运行 PyOne</span></span><br><span class="line">gunicorn -k eventlet -b 0.0.0.0:34567 run:app</span><br></pre></td></tr></table></figure><p>访问 <a href="http://IP:34567" target="_blank" rel="noopener external nofollow noreferrer">http://IP:34567</a> 检查是否成功运行，成功运行后按 <code>Ctrl + A</code> 再按 <code>D</code> 后台运行。</p><h2 id="绑定-OneDrive"><a href="#绑定-OneDrive" class="headerlink" title="绑定 OneDrive"></a>绑定 OneDrive</h2><ul><li>访问 <a href="http://IP:34567/admin/login" target="_blank" rel="noopener external nofollow noreferrer">http://IP:34567/admin/login</a> 登录后台，默认密码 <code>PyOne</code> </li><li>点击 <code>文件管理</code> 绑定 OneDrive</li></ul><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>用 OneinStack 新建一个站点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> oneinstack</span><br><span class="line">./vhost.sh</span><br></pre></td></tr></table></figure><p>打开 <code>/usr/local/nginx/conf/vhost/网站域名.conf</code> ，添加以下配置进行反代</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:34567;</span><br><span class="line">  include /usr/<span class="built_in">local</span>/nginx/conf/proxy.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>😋 Enjoy it !</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;PyOne 是一款基于 Python-Flask 的 OneDrive 文件本地化浏览系统，用 MongoDB 储存文件列表，Redis 缓存数据，支持绑定多个网盘，能极大的提高使用效率。&lt;/p&gt;
&lt;p&gt;GitHub：&lt;a
        
      
    
    </summary>
    
    
    
      <category term="Debian" scheme="https://moesakura.world/tags/Debian/"/>
    
      <category term="OneinStack" scheme="https://moesakura.world/tags/OneinStack/"/>
    
      <category term="Python" scheme="https://moesakura.world/tags/Python/"/>
    
      <category term="MongoDB" scheme="https://moesakura.world/tags/MongoDB/"/>
    
      <category term="Redis" scheme="https://moesakura.world/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>HP 暗影精灵 2 安装黑苹果（macOS Mojave 10.14.5）</title>
    <link href="https://moesakura.world/archives/hp-install-macos/"/>
    <id>https://moesakura.world/archives/hp-install-macos/</id>
    <published>2020-01-01T15:19:00.000Z</published>
    <updated>2020-01-13T05:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>萌樱这里分享一个暗影精灵 2 macOS 10.14.5 的 EFI 及安装教程。 如果想安装 macOS 10.15，可以看「<a href="/archives/efi-hp-catalina/">HP 暗影精灵 2 EFI（macOS Catalina 10.15.2）</a>」。</p><blockquote>    WiFi 需要更换无线网卡 <br>    没有影响日常使用的 Bug <br>    可以更新到最新的 Mojave 10.14.6 </blockquote><p><img src="https://cdn.jsdelivr.net/gh/MoeSakuraW/moesakuraw.github.io/img/macOS.jpg" alt="macOS.jpg"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>macOS：<a href="https://cloud.moesakura.world/博客/HP%20暗影精灵%202%20安装黑苹果（macOS%20Mojave%2010.14.5）" target="_blank" rel="noopener external nofollow noreferrer">macOS Mojave 10.14.5(18F132) Installer with Clover 4928.dmg</a></p><p>EFI：<a href="https://cloud.moesakura.world/博客/HP%20暗影精灵%202%20安装黑苹果（macOS%20Mojave%2010.14.5）" target="_blank" rel="noopener external nofollow noreferrer">CLOVER_macOS Mojave 10.14.5.rar</a></p><p>balenaEtcher：<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener external nofollow noreferrer">https://www.balena.io/etcher/</a></p><p>DiskGenius：<a href="http://www.diskgenius.cn/" target="_blank" rel="noopener external nofollow noreferrer">http://www.diskgenius.cn/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="修改-BIOS-设置"><a href="#修改-BIOS-设置" class="headerlink" title="修改 BIOS 设置"></a>修改 BIOS 设置</h3><ul><li>开机按 F10 进入 BIOS。</li><li>关闭安全启动，按 F10 保存设置并退出 BIOS。</li></ul><h3 id="制作安装盘"><a href="#制作安装盘" class="headerlink" title="制作安装盘"></a>制作安装盘</h3><blockquote><p>如果 U 盘曾经装过系统 / PE ，要先恢复为原来默认的分区</p></blockquote><p>打开 <code>CMD</code> 输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk</span><br><span class="line">select disk x  <span class="comment"># x为你的 U 盘序号</span></span><br><span class="line">clean</span><br><span class="line">create partition primary</span><br><span class="line">format fs=fat32 quick</span><br></pre></td></tr></table></figure><ul><li>插入 U 盘后打开 balenaEtcher ，把下载好的 macOS 写入 U 盘。</li><li>打开 DiskGenius ，删除 U 盘 EFI 文件夹 里的 CLOVER 文件夹。</li><li>把下载的 CLOVER 文件夹粘贴进 U 盘 EFI 文件夹里。</li></ul><h3 id="安装-macOS"><a href="#安装-macOS" class="headerlink" title="安装 macOS"></a>安装 macOS</h3><blockquote>    macOS 推荐安装在固态硬盘上<br>    如果想装进某一个分区，该分区的硬盘上必须要有一个 200 MB 的 ESP 分区</blockquote><ul><li>开机按 ESC 暂停启动，然后按 F9 选择 U 盘启动。</li><li>进入 CLOVER 后，选择 <code>Boot macOS Install from Install macOS Mojave</code> 。</li><li>用磁盘工具，抹掉一个需要安装的磁盘或者分区。抹掉过程中可能会闪退回 macOS 实用工具，重复这个操作即可。<ul><li>名称：macOS</li><li>格式：MacOS 扩展（日志式）</li><li>方案：GUID 分区图</li></ul></li><li>返回到 macOS 实用工具，选择安装 macOS。安装过程中可能会多次自动重启，每次都需要手动选择 U 盘启动，然后选择 <code>Boot macOS Install from macOS</code> 进入到安装界面，安装时间大约 20 分钟。</li></ul><h3 id="替换系统的-EFI"><a href="#替换系统的-EFI" class="headerlink" title="替换系统的 EFI"></a>替换系统的 EFI</h3><p>进入系统后，需要把 U 盘内的 EFI 替换到硬盘内，否则拔掉 U 盘不能进入 macOS 。</p><p>打开终端，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">diskutil list</span><br><span class="line">sudo diskutil mount disk0s1</span><br><span class="line"><span class="comment"># 输入密码</span></span><br><span class="line">sudo diskutil mount disk3s1</span><br><span class="line">open .</span><br></pre></td></tr></table></figure><p>把 U 盘内的 EFI 文件夹（有 README.txt）拷贝粘贴到硬盘内的 EFI 文件夹，选择替换所有文件。替换完成后拔掉 U 盘，重启电脑。</p><p>😋 Enjoy it !</p><h2 id="原文件链接"><a href="#原文件链接" class="headerlink" title="原文件链接"></a>原文件链接</h2><p>macOS ：<a href="https://blog.daliansky.net/macOS-Mojave-10.14.5-18F132-official-version-with-Clover-4928-original-image.html" target="_blank" rel="noopener external nofollow noreferrer" title="[黑果小兵]macOS Mojave 10.14.5 18F132 正式版 with Clover 4928原版镜像">【黑果小兵】macOS Mojave 10.14.5 18F132 正式版 with Clover 4928原版镜像</a></p><p>EFI ：<a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1818416&highlight=%B0%B5%D3%B0%BE%AB%C1%E92" target="_blank" rel="noopener external nofollow noreferrer" title="[config] 暗影精灵2固态换PM981EFI分享">[config] 暗影精灵2固态换PM981EFI分享</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;萌樱这里分享一个暗影精灵 2 macOS 10.14.5 的 EFI 及安装教程。 如果想安装 macOS 10.15，可以看「&lt;a href=&quot;/archives/efi-hp-catalina/&quot;&gt;HP 暗影精灵 2 EFI（macOS Catalina
        
      
    
    </summary>
    
    
    
      <category term="macOS" scheme="https://moesakura.world/tags/macOS/"/>
    
      <category term="黑苹果" scheme="https://moesakura.world/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
</feed>
